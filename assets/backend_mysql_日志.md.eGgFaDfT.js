import{_ as e,c as l,o as r,ag as d}from"./chunks/framework.Bpd2YlgX.js";const h=JSON.parse('{"title":"日志","description":"","frontmatter":{},"headers":[],"relativePath":"backend/mysql/日志.md","filePath":"backend/mysql/日志.md"}'),g={name:"backend/mysql/日志.md"};function n(a,o,i,p,t,s){return r(),l("div",null,o[0]||(o[0]=[d('<h1 id="日志" tabindex="-1">日志 <a class="header-anchor" href="#日志" aria-label="Permalink to &quot;日志&quot;">​</a></h1><h2 id="bin-log-redo-log-undo-log日志" tabindex="-1">bin log/redo log/undo log日志 <a class="header-anchor" href="#bin-log-redo-log-undo-log日志" aria-label="Permalink to &quot;bin log/redo log/undo log日志&quot;">​</a></h2><h3 id="它们是什么" tabindex="-1">它们是什么？ <a class="header-anchor" href="#它们是什么" aria-label="Permalink to &quot;它们是什么？&quot;">​</a></h3><p><code>bin log</code>（二进制日志）和 <code>redo log</code>（重做日志）和 <code>undo log</code>（回滚日志）。</p><p><strong>bin log二进制日志</strong></p><p>Bin Log是MySQL的二进制日志，记录了所有更改数据或可能更改数据的SQL语句，并以二进制格式保存在磁盘上</p><p>binlog主要用于数据备份和主从同步。</p><p><strong>redo log重做日志</strong></p><p>redo log是重做日志，记录的是数据修改之后的值，不管事务是否提交都会记录下来。它的主要作用是保证服务崩溃后，仍能把事务中变更的数据持久化到磁盘上。</p><p><strong>redo log保证了事务的持久性</strong>，比如断电了，InnoDB存储引擎会使用redo log恢复到断电前的时刻，以此来保证数据的完整性。</p><p><strong>undo log回滚日志</strong></p><p>Undo Log是MySQL的回滚日志，它用于在事务回滚或者数据库崩溃时撤销已提交的事务对数据库的修改。Undo Log记录了<strong>记录了事务对数据库所做的更改的相反操作。例如，如果事务执行了一条INSERT语句，那么Undo Log会记录一个DELETE操作；若执行UPDATE，则记录一个相反的UPDATE操作。</strong>，以便在需要回滚时可以恢复数据。</p><p><strong>undo log则负责事务的回滚和实现MVCC，保证了事务的原子性和一致性</strong></p><h3 id="undo-log-与redo-log的区别" tabindex="-1">undo log 与redo log的区别 <a class="header-anchor" href="#undo-log-与redo-log的区别" aria-label="Permalink to &quot;undo log 与redo log的区别&quot;">​</a></h3><p>Undo Log和Redo Log是InnoDB存储引擎中实现事务持久性和原子性的关键机制，但它们的功能和应用场景不同。下面将从多个维度详细对比这两种日志：</p><ol><li><p>基本概念 Undo Log：记录事务对数据所做的修改前的状态，用于事务回滚和MVCC（多版本并发控制）。Redo Log：记录数据页的物理修改操作，主要用于系统崩溃后的恢复和<strong>保证事务的持久性</strong>。</p></li><li><p>应用场景 Undo Log：用于事务回滚时恢复数据到原始状态，支持MVCC以提供一致性读视图，避免锁竞争。Redo Log：在数据库崩溃后通过重放日志保证已提交事务的修改不会丢失，采用WAL策略提升写入性能。</p></li><li><p>存储内容 Undo Log：记录数据的逻辑变化，如INSERT操作会记录相反的DELETE操作信息。Redo Log：记录物理数据页面的修改信息，如数据页的变更。</p></li></ol><h3 id="bin-log和redo-log有什么区别" tabindex="-1">bin log和redo log有什么区别？ <a class="header-anchor" href="#bin-log和redo-log有什么区别" aria-label="Permalink to &quot;bin log和redo log有什么区别？&quot;">​</a></h3><p>下面将从多个维度详细对比Bin Log和Redo Log：</p><ol><li><p>基本概念 Bin Log：记录了对MySQL数据库执行更改的所有操作，包括DDL和DML语句（不包括查询语句），以事件形式记录。Redo Log：记录数据页的物理修改操作，主要用于系统崩溃后的恢复。</p></li><li><p>应用场景 Bin Log：用于数据恢复、主从复制以及数据备份。Redo Log：保证事务的持久性，防止系统崩溃导致的数据丢失，提升写入性能。</p></li><li><p>记录内容 Bin Log：记录逻辑操作，如SQL语句及其增删改操作的反向信息。Redo Log：记录物理数据页面的修改信息。</p></li></ol><h3 id="redo-log-的执行流程" tabindex="-1">redo log 的执行流程? <a class="header-anchor" href="#redo-log-的执行流程" aria-label="Permalink to &quot;redo log 的执行流程?&quot;">​</a></h3><p>Redo Log（重做日志）是MySQL数据库中的一种日志文件，用于记录数据库中每个事务的修改操作。它的执行流程如下：</p><ol><li><p>当一个事务开始时，InnoDB存储引擎会为这个事务分配一个连续的、且自增的log sequence number（LSN，日志序列号）。</p></li><li><p>在事务执行过程中，每当有数据被修改，InnoDB存储引擎就会将这个修改作为一个“redo log record”写入到Redo Log Buffer（重做日志缓冲区）中。这个记录包含了修改的类型（插入、更新或删除）、修改的表空间ID、修改的数据页号、修改的行信息等。</p></li><li><p>当事务提交时，InnoDB存储引擎会将Redo Log Buffer中的redo log record写入到Redo Log文件中。这个过程是异步进行的，也就是说，即使redo log record还没有被写入到磁盘上的Redo Log文件中，事务也可以正常提交。</p></li><li><p>当系统发生故障时，如服务器宕机或者数据库进程异常退出，InnoDB存储引擎可以通过Redo Log文件中的redo log record来恢复未完成的事务。具体来说，它会扫描所有的Redo Log文件，找到未完成的事务，然后根据redo log record重新执行这些事务的修改操作，从而保证数据的一致性。</p></li><li><p>Redo Log文件的大小是有限的，当Redo Log Buffer中的redo log record被写入到Redo Log文件后，这些redo log record就会被标记为“已提交”。同时，InnoDB存储引擎会定期地将Redo Log文件中的“已提交”的redo log record进行清理，以释放磁盘空间。这个过程被称为“redo log compaction”。</p></li></ol><p>总之，Redo Log的主要作用是记录数据库中每个事务的修改操作，以便在系统发生故障时能够恢复未完成的事务，保证数据的一致性。</p><h3 id="为什么-redo-log-具有-crash-safe-的能力-是-binlog-无法替代的" tabindex="-1">为什么 redo log 具有 crash-safe 的能力，是 binlog 无法替代的？ <a class="header-anchor" href="#为什么-redo-log-具有-crash-safe-的能力-是-binlog-无法替代的" aria-label="Permalink to &quot;为什么 redo log 具有 crash-safe 的能力，是 binlog 无法替代的？&quot;">​</a></h3><p>第一点：redo log 可确保 innoDB 判断哪些数据已经刷盘，哪些数据还没有</p><ul><li><p>redo log 和 binlog 有一个很大的区别就是，一个是循环写，一个是追加写。也就是说 redo log 只会记录未刷盘的日志，已经刷入磁盘的数据都会从 redo log 这个有限大小的日志文件里删除。binlog 是追加日志，保存的是全量的日志。</p></li><li><p>当数据库 crash 后，想要恢复<strong>未刷盘但已经写入 redo log 和 binlog 的数据</strong>到内存时，binlog 是无法恢复的。虽然 binlog 拥有全量的日志，但没有一个标志让 innoDB 判断哪些数据已经刷盘，哪些数据还没有。</p></li><li><p>但 redo log 不一样，只要刷入磁盘的数据，都会从 redo log 中抹掉，因为是循环写！数据库重启后，直接把 redo log 中的数据都恢复至内存就可以了。</p></li></ul><p>第二点：如果 redo log 写入失败，说明此次操作失败，事务也不可能提交</p><ul><li><p>redo log 每次更新操作完成后，就一定会写入日志，如果<strong>写入失败</strong>，说明此次操作失败，事务也不可能提交。</p></li><li><p>redo log 内部结构是基于页的，记录了这个页的字段值变化，只要crash后读取redo log进行重放，就可以恢复数据。</p></li><li><p>这就是为什么 redo log 具有 crash-safe 的能力，而 binlog 不具备。</p></li></ul>',28)]))}const L=e(g,[["render",n]]);export{h as __pageData,L as default};
