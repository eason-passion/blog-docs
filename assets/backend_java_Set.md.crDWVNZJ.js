import{_ as e,c as t,o as s,ag as h}from"./chunks/framework.Bpd2YlgX.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/java/Set.md","filePath":"backend/java/Set.md"}'),r={name:"backend/java/Set.md"};function p(o,a,i,n,d,l){return s(),t("div",null,a[0]||(a[0]=[h('<h2 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h2><h3 id="hashset-的底层实现" tabindex="-1">HashSet 的底层实现? <a class="header-anchor" href="#hashset-的底层实现" aria-label="Permalink to &quot;HashSet 的底层实现?&quot;">​</a></h3><p>HashSet 底层就是基于 HashMap 实现的。</p><p>HashSet 主要⽤于去重，⽐如，我们需要统计⼀篇⽂章中有多少个不重复的单词，就可以使⽤ HashSet 来实现。</p><p>HashSet 会⾃动去重，因为它是⽤ HashMap 实现的，HashMap 的键是唯⼀的，相同键会覆盖掉原来的键，于是 第⼆次 add ⼀个相同键的元素会直接覆盖掉第⼀次的键。</p><h3 id="hashset-和-arraylist-的区别" tabindex="-1">HashSet 和 ArrayList 的区别 <a class="header-anchor" href="#hashset-和-arraylist-的区别" aria-label="Permalink to &quot;HashSet 和 ArrayList 的区别&quot;">​</a></h3><p>ArrayList 是基于动态数组实现的，HashSet 是基于 HashMap 实现的。 </p><p>ArrayList 允许重复元素和 null 值，可以有多个相同的元素；HashSet 保证每个元素唯⼀，不允许重复元素， 基于元素的 hashCode 和 equals ⽅法来确定元素的唯⼀性。 </p><p>ArrayList 保持元素的插⼊顺序，可以通过索引访问元素；HashSet 不保证元素的顺序，元素的存储顺序依赖 于哈希算法，并且可能随着元素的添加或删除⽽改变。</p><h3 id="hashset-怎么判断元素重复-重复了是否-put" tabindex="-1">HashSet 怎么判断元素重复，重复了是否 put <a class="header-anchor" href="#hashset-怎么判断元素重复-重复了是否-put" aria-label="Permalink to &quot;HashSet 怎么判断元素重复，重复了是否 put&quot;">​</a></h3><p>HashSet 的 add ⽅法是通过调⽤ HashMap 的 put ⽅法实现的，所以 HashSet 判断元素重复的逻辑底层依然是 HashMap 的底层逻辑。</p>',11)]))}const H=e(r,[["render",p]]);export{c as __pageData,H as default};
