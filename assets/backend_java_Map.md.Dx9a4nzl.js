import{_ as h,c as s,o as p,ag as i}from"./chunks/framework.Bpd2YlgX.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/java/Map.md","filePath":"backend/java/Map.md"}'),e={name:"backend/java/Map.md"};function l(t,a,n,r,o,d){return p(),s("div",null,a[0]||(a[0]=[i(`<h2 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h2><h3 id="hashmap底层数据结构" tabindex="-1">HashMap底层数据结构 <a class="header-anchor" href="#hashmap底层数据结构" aria-label="Permalink to &quot;HashMap底层数据结构&quot;">​</a></h3><p>DK1.7的数据结构是<code>数组</code>+<code>链表</code>，JDK1.8的数据结构是<code>数组</code>+<code>链表</code>+<code>红黑树</code>。</p><p>桶数组是用来存储数据元素，链表是用来解决冲突，红黑树是为了提高查询的效率。</p><ul><li><p>数据元素通过映射关系，也就是散列函数，映射到桶数组对应索引的位置</p></li><li><p>如果发生冲突，从冲突的位置拉一个链表，插入冲突的元素</p></li><li><p>如果链表长度&gt;8&amp;数组大小&gt;=64，链表转为红黑树</p></li><li><p>如果红黑树节点个数&lt;6 ，转为链表</p></li></ul><h3 id="红黑树" tabindex="-1">红黑树 <a class="header-anchor" href="#红黑树" aria-label="Permalink to &quot;红黑树&quot;">​</a></h3><p>红黑树本质上是一种二叉查找树，为了保持平衡，它又在二叉查找树的基础上增加了一些规则：</p><ol><li><p>每个节点要么是红色，要么是黑色；</p></li><li><p>根节点永远是黑色的；</p></li><li><p>所有的叶子节点都是是黑色的（注意这里说叶子节点其实是图中的 NULL 节点）；</p></li><li><p>每个红色节点的两个子节点一定都是黑色；</p></li><li><p>从任一节点到其子树中每个叶子节点的路径都包含相同数量的黑色节点；</p></li></ol><h3 id="红黑树如何保证平衡" tabindex="-1">红黑树如何保证平衡？ <a class="header-anchor" href="#红黑树如何保证平衡" aria-label="Permalink to &quot;红黑树如何保证平衡？&quot;">​</a></h3><p>黑树有两种方式保持平衡：<code>旋转</code>和<code>染色</code></p><h3 id="hashmap为什么要用红黑树-为什么不用二叉树、平衡树" tabindex="-1">HashMap为什么要用红黑树，为什么不用二叉树、平衡树？ <a class="header-anchor" href="#hashmap为什么要用红黑树-为什么不用二叉树、平衡树" aria-label="Permalink to &quot;HashMap为什么要用红黑树，为什么不用二叉树、平衡树？&quot;">​</a></h3><p>红黑树是一种平衡的二叉树，插入、删除、查找的最坏时间复杂度都为 O(logn)，避免了二叉树最坏情况下的O(n)时间复杂度。</p><p>平衡二叉树是比红黑树更严格的平衡树，为了保持保持平衡，需要旋转的次数更多，也就是说平衡二叉树保持平衡的效率更低，所以平衡二叉树插入和删除的效率比红黑树要低。</p><h3 id="hashmap-的-put-流程" tabindex="-1">HashMap 的 put 流程 <a class="header-anchor" href="#hashmap-的-put-流程" aria-label="Permalink to &quot;HashMap 的 put 流程&quot;">​</a></h3><p>哈希寻址 → 处理哈希冲突（链表还是红⿊树）→ 判断是否需要扩容 → 插⼊/覆盖节点。</p><ol><li><p>首先进行哈希值的扰动，获取一个新的哈希值。<code>(key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</code></p></li><li><p>判断tab是否位空或者长度为0，如果是则进行扩容操作。</p></li><li><p>根据哈希值计算下标，如果对应小标正好没有存放数据，则直接插入即可否则需要覆盖。<code>tab[i = (n - 1) &amp; hash])</code></p></li><li><p>判断tab[i]是否为树节点，否则向链表中插入数据，是则向树中插入节点。</p></li><li><p>如果链表中插入节点的时候，链表长度大于等于8，则需要把链表转换为红黑树。<code>treeifyBin(tab, hash);</code></p></li><li><p>最后所有元素处理完成后，判断是否超过阈值；<code>threshold</code>，超过则扩容。</p></li></ol><h3 id="只重写元素的-equals-方法没重写-hashcode-put-的时候会发生什么" tabindex="-1">只重写元素的 equals ⽅法没重写 hashCode，put 的时候会发生什么? <a class="header-anchor" href="#只重写元素的-equals-方法没重写-hashcode-put-的时候会发生什么" aria-label="Permalink to &quot;只重写元素的 equals ⽅法没重写 hashCode，put 的时候会发生什么?&quot;">​</a></h3><p>如果只重写 equals ⽅法，没有重写 hashCode ⽅法，那么会导致 equals 相等的两个对象，hashCode 不相等， 这样的话，两个对象会被 put 到数组中不同的位置，导致 get 的时候，⽆法获取到正确的值。</p><h3 id="hashmap怎么get查找元素" tabindex="-1">HashMap怎么get查找元素？ <a class="header-anchor" href="#hashmap怎么get查找元素" aria-label="Permalink to &quot;HashMap怎么get查找元素？&quot;">​</a></h3><ol><li><p>使用扰动函数，获取新的哈希值</p></li><li><p>计算数组下标，获取节点</p></li><li><p>当前节点和key匹配，直接返回</p></li><li><p>否则，当前节点是否为树节点，查找红黑树</p></li><li><p>否则，遍历链表查找</p></li></ol><h3 id="hashmap的hash函数" tabindex="-1">HashMap的hash函数？ <a class="header-anchor" href="#hashmap的hash函数" aria-label="Permalink to &quot;HashMap的hash函数？&quot;">​</a></h3><p>HashMap的哈希函数是先拿到 key 的hashcode，是一个32位的int类型的数值，然后让hashcode的高16位和低16位进行异或操作。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object key) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // key的hashCode和key的hashCode右移16位做异或运算</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hashCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>为了降低哈希碰撞的概率。</p><h3 id="为什么hashmap的容量是2的幂次方" tabindex="-1">为什么HashMap的容量是2的幂次方？ <a class="header-anchor" href="#为什么hashmap的容量是2的幂次方" aria-label="Permalink to &quot;为什么HashMap的容量是2的幂次方？&quot;">​</a></h3><p>为了快速定位元素在底层数组中的下标。 </p><p>HashMap 是通过 hash &amp; (n-1) 来定位元素下标的，n 为数组的⼤⼩，也就是 HashMap 底层数组的容量。 数组⻓度-1 正好相当于⼀个“低位掩码”——掩码的低位最好全是 1，这样 &amp; 运算才有意义，否则结果⼀定是 0。</p><p> 2 幂次⽅刚好是偶数，偶数-1 是奇数，奇数的⼆进制最后⼀位是 1，也就保证了 hash &amp;(length-1) 的最后⼀位 可能为 0，也可能为 1（取决于 hash 的值），这样可以保证哈希值的均匀分布。</p><p>换句话说，&amp; 操作的结果就是将哈希值的⾼位全部归零，只保留低位值。</p><h3 id="hashmap的扩容机制" tabindex="-1">HashMap的扩容机制 <a class="header-anchor" href="#hashmap的扩容机制" aria-label="Permalink to &quot;HashMap的扩容机制&quot;">​</a></h3><p>当键值对数量超过阈值，也就是容量 * 负载因⼦时。默认负载因子是0.75。初始容量16。</p><p>扩容时，HashMap 会创建⼀个新的数组，其容量是原来的两倍。然后遍历旧哈希表中的元素，将其重新分配到新 的哈希表中。</p><p>如果当前桶中只有⼀个元素，那么直接通过键的哈希值与数组⼤⼩取模锁定新的索引位置： e.hash &amp; (newCap - 1) 。 如果当前桶是红⿊树，那么会调⽤ split() ⽅法分裂树节点，以保证树的平衡。 </p><p>如果当前桶是链表，会通过旧键的哈希值与旧的数组⼤⼩取模 (e.hash &amp; oldCap) == 0 来作为判断条件，如果 条件为真，元素保留在原索引的位置；否则元素移动到原索引 + 旧数组⼤⼩的位置。</p><h3 id="hashmap是线程安全的吗" tabindex="-1">HashMap是线程安全的吗？ <a class="header-anchor" href="#hashmap是线程安全的吗" aria-label="Permalink to &quot;HashMap是线程安全的吗？&quot;">​</a></h3><p>HashMap不是线程安全的，可能会发生这些问题：</p><ul><li><p>多线程下扩容死循环。JDK1.7 中的 HashMap 使用头插法插入元素，在多线程的环境下，扩容的时候有可能导致环形链表的出现，形成死循环。因此，JDK1.8 使用尾插法插入元素，在扩容时会保持链表元素原本的顺序，不会出现环形链表的问题。</p></li><li><p>多线程的 put 可能导致元素的丢失。多线程同时执行 put 操作，如果计算出来的索引位置是相同的，那会造成前一个 key 被后一个 key 覆盖，从而导致元素的丢失。此问题在 JDK 1.7 和 JDK 1.8 中都存在。</p></li><li><p>put 和 get 并发时，可能导致 get 为 null。线程 1 执行 put 时，因为元素个数超出 threshold 而导致 rehash，线程 2 此时执行 get，有可能导致这个问题。这个问题在 JDK 1.7 和 JDK 1.8 中都存在。</p></li></ul><h3 id="解决-hashmap-线程不安全的问题" tabindex="-1">解决 HashMap 线程不安全的问题? <a class="header-anchor" href="#解决-hashmap-线程不安全的问题" aria-label="Permalink to &quot;解决 HashMap 线程不安全的问题?&quot;">​</a></h3><p>Java 中有 HashTable、Collections.synchronizedMap、以及 ConcurrentHashMap 可以实现线程安全的 Map。</p><ul><li><p>HashTable 是直接在操作方法上加 synchronized 关键字，锁住整个table数组，粒度比较大；</p></li><li><p>Collections.synchronizedMap 是使用 Collections 集合工具的内部类，通过传入 Map 封装出一个 SynchronizedMap 对象，内部定义了一个对象锁，方法内通过对象锁实现；</p></li><li><p>ConcurrentHashMap 在jdk1.7中使用分段锁，在jdk1.8中使用CAS+synchronized。</p></li></ul><h3 id="hashmap内部节点是否有序" tabindex="-1">HashMap内部节点是否有序？ <a class="header-anchor" href="#hashmap内部节点是否有序" aria-label="Permalink to &quot;HashMap内部节点是否有序？&quot;">​</a></h3><p>HashMap是无序的，根据 hash 值随机插入。如果想使用有序的Map，可以使用LinkedHashMap 或者 TreeMap。</p><h3 id="linkedhashmap-怎么实现有序的" tabindex="-1">LinkedHashMap 怎么实现有序的？ <a class="header-anchor" href="#linkedhashmap-怎么实现有序的" aria-label="Permalink to &quot;LinkedHashMap 怎么实现有序的？&quot;">​</a></h3><p>LinkedHashMap 在 HashMap 的基础上维护了⼀个双向链表，通过 before 和 after 标识前置节点和后置节点。</p><p>从⽽实现插⼊的顺序或访问顺序。</p><h3 id="x20-treemap-怎么实现有序的" tabindex="-1"> TreeMap 怎么实现有序的？ <a class="header-anchor" href="#x20-treemap-怎么实现有序的" aria-label="Permalink to &quot;&amp;#x20;TreeMap 怎么实现有序的？&quot;">​</a></h3><p>TreeMap 通过 key 的⽐较器来决定元素的顺序，如果没有指定⽐较器，那么 key 必须实现 Comparable 接⼝。</p><p>TreeMap 的底层是红⿊树，红⿊树是⼀种⾃平衡的⼆叉查找树，每个节点都⼤于其左⼦树中的任何节点，⼩于其 右⼦节点树种的任何节点。</p><p>插⼊或者删除元素时通过旋转和染⾊来保持树的平衡。 查找的时候从根节点开始，利⽤⼆叉查找树的特点，逐步向左⼦树或者右⼦树递归查找，直到找到⽬标元素。</p><h3 id="treemap-和-hashmap-的区别" tabindex="-1">TreeMap 和 HashMap 的区别 <a class="header-anchor" href="#treemap-和-hashmap-的区别" aria-label="Permalink to &quot;TreeMap 和 HashMap 的区别&quot;">​</a></h3><p>①、HashMap 是基于数组+链表+红⿊树实现的，put 元素的时候会先计算 key 的哈希值，然后通过哈希值计算出 元素在数组中的存放下标，然后将元素插⼊到指定的位置，如果发⽣哈希冲突，会使⽤链表来解决，如果链表⻓度 ⼤于 8，会转换为红⿊树。 </p><p>②、TreeMap 是基于红⿊树实现的，put 元素的时候会先判断根节点是否为空，如果为空，直接插⼊到根节点， 如果不为空，会通过 key 的⽐较器来判断元素应该插⼊到左⼦树还是右⼦树。 </p><p>在没有发⽣哈希冲突的情况下，HashMap 的查找效率是 O(1) 。适⽤于查找操作⽐较频繁的场景。 TreeMap 的查找效率是 O(logn) 。并且保证了元素的顺序，因此适⽤于需要⼤量范围查找或者有序遍历的场景。</p>`,53)]))}const u=h(e,[["render",l]]);export{c as __pageData,u as default};
