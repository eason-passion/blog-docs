import{_ as e,c as l,o as i,ag as r}from"./chunks/framework.Bpd2YlgX.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"bigModel/RAG 概念.md","filePath":"bigModel/RAG 概念.md"}'),t={name:"bigModel/RAG 概念.md"};function o(n,a,d,p,s,h){return i(),l("div",null,a[0]||(a[0]=[r('<h2 id="rag-概念" tabindex="-1">RAG 概念 <a class="header-anchor" href="#rag-概念" aria-label="Permalink to &quot;RAG 概念&quot;">​</a></h2><h3 id="什么是-rag" tabindex="-1">什么是 RAG？ <a class="header-anchor" href="#什么是-rag" aria-label="Permalink to &quot;什么是 RAG？&quot;">​</a></h3><p>RAG（Retrieval-Augmented Generation，检索增强生成）是一种结合信息检索技术和 AI 内容生成的混合架构，可以解决大模型的知识时效性限制和幻觉问题。</p><p>简单来说，RAG 就像给 AI 配了一个 “小抄本”，让 AI 回答问题前先查一查特定的知识库来获取知识，确保回答是基于真实资料而不是凭空想象。</p><p>从技术角度看，RAG 在大语言模型生成回答之前，会先从外部知识库中检索相关信息，然后将这些检索到的内容作为额外上下文提供给模型，引导其生成更准确、更相关的回答。</p><p>通过 RAG 技术改造后，AI 就能：Ny8IKBIOsoTTCgTymQbjLul9Gmod0P0TJLzDMNBV70</p><ul><li>准确回答关于特定内容的问题</li><li>在合适的时机推荐相关课程和服务</li><li>用特定的语气和用户交流</li><li>提供更新、更准确的建议</li></ul><h3 id="rag-工作流程" tabindex="-1">RAG 工作流程 <a class="header-anchor" href="#rag-工作流程" aria-label="Permalink to &quot;RAG 工作流程&quot;">​</a></h3><p>RAG 技术实现主要包含以下 4 个核心步骤，让我们分步来学习：</p><ul><li>文档收集和切割</li><li>向量转换和存储</li><li>文档过滤和检索</li><li>查询增强和关联</li></ul><h4 id="_1、文档收集和切割" tabindex="-1">1、文档收集和切割 <a class="header-anchor" href="#_1、文档收集和切割" aria-label="Permalink to &quot;1、文档收集和切割&quot;">​</a></h4><p>文档收集：从各种来源（网页、PDF、数据库等）收集原始文档</p><p>文档预处理：清洗、标准化文本格式</p><p>文档切割：将长文档分割成适当大小的片段（俗称 chunks）</p><ul><li>基于固定大小（如 512 个 token）</li><li>基于语义边界（如段落、章节）</li><li>基于递归分割策略（如递归字符 n-gram 切割）</li></ul><h4 id="_2、向量转换和存储" tabindex="-1">2、向量转换和存储 <a class="header-anchor" href="#_2、向量转换和存储" aria-label="Permalink to &quot;2、向量转换和存储&quot;">​</a></h4><p>向量转换：使用 Embedding 模型将文本块转换为高维向量表示，可以捕获到文本的语义特征</p><p>向量存储：将生成的向量和对应文本存入向量数据库，支持高效的相似性搜索</p>',18)]))}const u=e(t,[["render",o]]);export{c as __pageData,u as default};
