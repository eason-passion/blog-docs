import{_ as t,c as o,o as r,ag as e}from"./chunks/framework.BHpayLOB.js";const _=JSON.parse('{"title":"反射","description":"","frontmatter":{},"headers":[],"relativePath":"backend/java/反射.md","filePath":"backend/java/反射.md"}'),n={name:"backend/java/反射.md"};function s(p,a,i,l,d,c){return r(),o("div",null,a[0]||(a[0]=[e('<h1 id="反射" tabindex="-1">反射 <a class="header-anchor" href="#反射" aria-label="Permalink to &quot;反射&quot;">​</a></h1><h2 id="什么是反射" tabindex="-1">什么是反射 <a class="header-anchor" href="#什么是反射" aria-label="Permalink to &quot;什么是反射&quot;">​</a></h2><p><strong>反射（Reflection）</strong> 是 Java 提供的一种在运行时动态获取和操作类、对象、方法及属性的机制。通过反射，程序可以绕过编译时的静态检查，直接与类的元数据交互，适用于框架开发、动态代理等场景。</p><h2 id="反射应用场景" tabindex="-1">反射应用场景 <a class="header-anchor" href="#反射应用场景" aria-label="Permalink to &quot;反射应用场景&quot;">​</a></h2><p>正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。<strong>这些框架中也大量使用了动态代理，而动态代理的实现也依赖反射。</strong></p><p>Java 中的一大利器 <strong>注解</strong> 的实现也用到了反射。 为什么你使用 Spring 的时候 ，一个<code>@Component</code>注解就声明了一个类为 Spring Bean 呢？为什么你通过一个 <code>@Value</code>注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？</p><p>这些都是因为你可以基于反射分析类，然后获取到类/属性/方法/方法的参数上的注解。你获取到注解之后，就可以做进一步的处理。</p><h2 id="反射的优缺点" tabindex="-1">反射的优缺点？ <a class="header-anchor" href="#反射的优缺点" aria-label="Permalink to &quot;反射的优缺点？&quot;">​</a></h2><p>反射可以让我们的代码更加灵活、为各种框架提供开箱即用的功能提供了便利。</p><p>不过，反射让我们在运行时有了分析操作类的能力的同时，也增加了安全问题，比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。</p><p><strong>反射的优点：</strong></p><ul><li><p><strong>可扩展性</strong> ：应用程序可以利用全限定名创建可扩展对象的实例，来使用来自外部的用户自定义类。</p></li><li><p><strong>类浏览器和可视化开发环境</strong> ：一个类浏览器需要可以枚举类的成员。可视化开发环境（如 IDE）可以从利用反射中可用的类型信息中受益，以帮助程序员编写正确的代码。</p></li><li><p><strong>调试器和测试工具</strong> ： 调试器需要能够检查一个类里的私有成员。测试工具可以利用反射来自动地调用类里定义的可被发现的 API 定义，以确保一组测试中有较高的代码覆盖率。</p></li></ul><p><strong>反射的缺点：</strong></p><ul><li><p><strong>性能开销</strong> ：反射涉及了动态类型的解析，所以 JVM 无法对这些代码进行优化。因此，反射操作的效率要比那些非反射操作低得多。我们应该避免在经常被执行的代码或对性能要求很高的程序中使用反射。</p></li><li><p><strong>安全限制</strong> ：使用反射技术要求程序必须在一个没有安全限制的环境中运行。如果一个程序必须在有安全限制的环境中运行，如 Applet，那么这就是个问题了。</p></li><li><p><strong>内部暴露</strong> ：由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），所以使用反射可能会导致意料之外的副作用，这可能导致代码功能失调并破坏可移植性。反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。</p></li></ul>',14)]))}const h=t(n,[["render",s]]);export{_ as __pageData,h as default};
